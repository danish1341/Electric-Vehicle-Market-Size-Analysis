# -*- coding: utf-8 -*-
"""EV Market Size Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xanKl-YMACZBtkgNXl4JfyrWB9iEicxP

# **EV Market Size Analysis**
"""

#importing important dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

ev_data = pd.read_csv('/content/Electric_Vehicle_Population_Data.csv')

ev_data.info()

ev_data.shape

ev_data.head()

ev_data.tail()

ev_data.isnull().sum()

# Since there is a less no of columns with null info
ev_data = ev_data.dropna()

ev_data.isnull().sum()

ev_data.shape

"""# EV Adoption Over Time (Visualizing through graph)"""

# Analyzing the growth of the EV population by model year
plt.figure(figsize=(12, 6))
ev_adoption_by_year = ev_data['Model Year'].value_counts().sort_index()
sns.lineplot(x=ev_adoption_by_year.index, y=ev_adoption_by_year.values, marker="o", color="b", lw=2)
sns.scatterplot(x=ev_adoption_by_year.index, y=ev_adoption_by_year.values, s=100, color="r", zorder=5)

plt.title('EV Adoption Over Time')
plt.xlabel('Model Year')
plt.ylabel('Number of Vehicles Registered')
plt.xticks(rotation=45)
plt.grid(True, linestyle="--", alpha=0.7)
plt.tight_layout()
plt.show()

"""# Geographical Distribution of a EV (Visualization through Stripplot)"""

# Top countries and cities with EV registrations
ev_county_distribution = ev_data['County'].value_counts()
top_counties = ev_county_distribution.head(3).index
top_counties_data = ev_data[ev_data['County'].isin(top_counties)] # Filtering data for these top counties
ev_city_distribution_top_counties = top_counties_data.groupby(['County', 'City']).size().reset_index(name='Number of Vehicles') # Aggregating the number of EVs by City and County
top_cities = ev_city_distribution_top_counties.nlargest(10, 'Number of Vehicles') # Selecting the top 10 cities with the most EV registrations

plt.figure(figsize=(12, 8))
sns.stripplot(x='Number of Vehicles', y='City', hue='County', data=top_cities, jitter=True, dodge=True, size=10, palette="viridis", alpha=0.7)
plt.title('Top Cities in Top Counties by EV Registrations')
plt.xlabel('Number of Vehicles Registered')
plt.ylabel('City')
plt.legend(title='County', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""# EV Types: (Comparing BEV and PHEV using Barplot)"""

# Breakdown of the dataset by electric vehicle type (BEV, etc.).
# analyzing the distribution of electric vehicle Types
ev_type_distribution = ev_data['Electric Vehicle Type'].value_counts()

plt.figure(figsize=(8, 6))
sns.barplot(x=ev_type_distribution.values, y=ev_type_distribution.index, palette="rocket" ,width=0.4)
plt.title('Distribution of Electric Vehicle Types')
plt.xlabel('Number of Vehicles Registered')
plt.ylabel('Electric Vehicle Type')
plt.tight_layout()
plt.show()

"""## Make and Model Popularity: Visualizing through Barplot

"""

# Identifying the most popular makes and models among the registered EVs.
# analyzing the popularity of EV manufacturers
ev_make_distribution = ev_data['Make'].value_counts().head(10)  # Limiting to top 10 for clarity

plt.figure(figsize=(12, 6))
sns.barplot(x=ev_make_distribution.values, y=ev_make_distribution.index, palette="cubehelix" , width = 0.6)
plt.xticks(rotation=45)
plt.title('Top 10 Popular EV Makes')
plt.xlabel('Number of Vehicles Registered')
plt.ylabel('Make')
plt.tight_layout()
plt.show()

"""## Electric Range Analysis"""

# Analyzing the electric range of vehicles to see how EV technology is progressing.

# Top 3 Manufacturers by EV Registration
top_3_makes = ev_make_distribution.head(3).index
top_makes_data = ev_data[ev_data['Make'].isin(top_3_makes)] # Filtering the dataset for the top manufacturers
plt.figure(figsize=(12, 8)) # Visualizing the top 10 models across these manufacturers using a countplot
top_models_sorted = top_makes_data['Model'].value_counts().nlargest(10).index
sorted_data = top_makes_data[top_makes_data['Model'].isin(top_models_sorted)] ## Sorting the data to display the most popular models


sns.countplot(y='Model', hue='Make', data=sorted_data, order=top_models_sorted, palette="coolwarm")

plt.title('Top 10 EV Models from Top 3 Manufacturers')
plt.xlabel('Number of Vehicles Registered')
plt.ylabel('Model')
plt.legend(title='Make', loc='center right')
plt.tight_layout()
plt.show()

"""## Electric Range Analysis:"""

plt.figure(figsize=(12, 6))
sns.histplot(ev_data['Electric Range'], bins=30, kde=True, color='royalblue')
plt.title('Distribution of Electric Vehicle Ranges')
plt.xlabel('Electric Range (miles)')
plt.ylabel('Number of Vehicles')
plt.axvline(ev_data['Electric Range'].mean(), color='red', linestyle='--', label=f'Mean Range: {ev_data["Electric Range"].mean():.2f} miles')
plt.legend()
plt.show()

"""## Average Electric Range by Model Year"""

# Calculating the average electric range by model year
average_range_by_year = ev_data.groupby('Model Year')['Electric Range'].mean().reset_index()

plt.figure(figsize=(12, 6))

# Scatter plot for individual data points
sns.scatterplot(x='Model Year', y='Electric Range', data=average_range_by_year, color='blue', s=100, marker='o')

# Adding a trendline to show the overall trend
sns.regplot(x='Model Year', y='Electric Range', data=average_range_by_year, scatter=False, color='orange', line_kws={"linestyle": "--"})

plt.title('Average Electric Range by Model Year')
plt.xlabel('Model Year')
plt.ylabel('Average Electric Range (miles)')
plt.grid(True)
plt.tight_layout()
plt.show()

"""##

## Average Electric Range in Top Makes
"""

# The top 10 models with the highest average electric range
average_range_by_model = top_makes_data.groupby(['Make', 'Model'])['Electric Range'].mean().sort_values(ascending=False).reset_index()

# the top 10 models with the highest average electric range
top_range_models = average_range_by_model.head(10)

plt.figure(figsize=(12, 8))
barplot = sns.barplot(x='Electric Range', y='Model', hue='Make', data=top_range_models, palette="cool")
plt.title('Top 10 Models by Average Electric Range in Top Makes')
plt.xlabel('Average Electric Range (miles)')
plt.ylabel('Model')
plt.legend(title='Make', loc='center right')
plt.show()



"""## **Estimated Market Size Analysis of Electric Vehicles in the United States**"""

# calculating the number of EVs registered each year
ev_registration_counts = ev_data['Model Year'].value_counts().sort_index()
ev_registration_counts

import numpy as np

# Filtering the dataset to include years with complete data, assuming 2023 is the last complete year
filtered_years = ev_registration_counts[ev_registration_counts.index <= 2023]

# Preparing the data for fitting by log-transforming y_data to linearize the exponential growth
x_data = filtered_years.index
y_data = np.log(filtered_years.values)

# Using numpy polyfit to fit a line to the log-transformed data (1st degree polynomial fit)
coeffs = np.polyfit(x_data, y_data, 1)

# Defining the exponential growth model using the fitted coefficients
def exp_growth_simple(x, a, b):
    return np.exp(a * x + b)

# Forecasting for 2024 and the next five years using the fitted model
forecast_years = np.arange(2024, 2024 + 6)
forecasted_values = exp_growth_simple(forecast_years, *coeffs)

# Creating a dictionary to display the forecasted values
forecasted_evs = dict(zip(forecast_years, forecasted_values))

print(forecasted_evs)

# Preparing data for plotting
years = np.arange(filtered_years.index.min(), 2029 + 1)
actual_years = filtered_years.index
forecast_years_full = np.arange(2024, 2029 + 1)

# Actual and forecasted values
actual_values = filtered_years.values
forecasted_values_full = exp_growth_simple(forecast_years_full, *coeffs)

plt.figure(figsize=(12, 8))

# Plotting actual registrations
plt.plot(actual_years, actual_values, 'bo-', label='Actual Registrations')

# Plotting forecasted registrations
plt.plot(forecast_years_full, forecasted_values_full, 'ro--', label='Forecasted Registrations')

plt.title('Current & Estimated EV Market')
plt.xlabel('Year')
plt.ylabel('Number of EV Registrations')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()